npx create-react-app . --template typescript
// crea un proyecto de react en la carpeta local

npm test
// corre los tests en modo escucha

test (name, fn, timeout)
name: nombre para identificar el test
fn: funcion que contiene lo que espera testear el test
timeout: tiemppo a esperar antes de abortar el test (default 5 segundos)

screen permite usar el dom (screen.getByText(/learn react/i) busca el texto learn react)
expect es como el assert

En getByText puedo pasr un texto screen.getByText('Hello') o una expresion regular screen.getByText(/hello/i)
el /i del final es para que no distinga mayusculas y minusculas

jest watch mode:
watch mode is an option that ew con pass to jest asking to watch files that have changed since last commit
and execute tests related only to those changed files
An optimization designed to make your tests run fast regardless on how many tests you have

Si el lugoar de usar test('Greet renders with a name', () => {
uso test.only('Greet renders with a name', () => { me va a correr solo ese test
test.skip('Greet renders with a name', () => { me va a omitir este test

Agrupar tests
-------------

describe(name, fn)
name: el nombre del grupo
fn: una funcion que contiene lo que se va a testear

se puede usar .skip y .only en describe
Se puede anidar los describe() y peuede haber varios por archivo.
describe no hace que sea un test suite separado, cada archivo es un test suite.

coonvenciones
------------
archivos con sufijo .test.js o .test.jsx
archivos con sufijo .spec.js o .spec.jsx
archivos con sufijo .js o .jsx que este dentro de carpetas llamadas __tests__ 

se puede usar it o test para hacer los tests
test('renders correctly', () => {
it('renders correctly', () => {

fit() es lo mismo que test.only()
xit() es lo mismo que test.skip()
