npx create-react-app . --template typescript
// crea un proyecto de react en la carpeta local

npm test
// corre los tests en modo escucha

test (name, fn, timeout)
name: nombre para identificar el test
fn: funcion que contiene lo que espera testear el test
timeout: tiemppo a esperar antes de abortar el test (default 5 segundos)

screen permite usar el dom (screen.getByText(/learn react/i) busca el texto learn react)
expect es como el assert

En getByText puedo pasr un texto screen.getByText('Hello') o una expresion regular screen.getByText(/hello/i)
el /i del final es para que no distinga mayusculas y minusculas

jest watch mode:
watch mode is an option that ew con pass to jest asking to watch files that have changed since last commit
and execute tests related only to those changed files
An optimization designed to make your tests run fast regardless on how many tests you have

Si el lugoar de usar test('Greet renders with a name', () => {
uso test.only('Greet renders with a name', () => { me va a correr solo ese test
test.skip('Greet renders with a name', () => { me va a omitir este test

Agrupar tests
-------------

describe(name, fn)
name: el nombre del grupo
fn: una funcion que contiene lo que se va a testear

se puede usar .skip y .only en describe
Se puede anidar los describe() y peuede haber varios por archivo.
describe no hace que sea un test suite separado, cada archivo es un test suite.

coonvenciones
------------
archivos con sufijo .test.js o .test.jsx
archivos con sufijo .spec.js o .spec.jsx
archivos con sufijo .js o .jsx que este dentro de carpetas llamadas __tests__ 

se puede usar it o test para hacer los tests
test('renders correctly', () => {
it('renders correctly', () => {

fit() es lo mismo que test.only()
xit() es lo mismo que test.skip()

code coverage
-------------

statement coverage: how many of the statements in the software code have been executed
branches coverage: how many of the branches of the control structures (i.e. if statement) have been executed
function coverage: how many of the functions defined hav been called and finally
line coverage: how many lines of source code have been tested

assertions
----------

expect(value)
the argument should be the value that your code produces

jest.io/docs/using-matchers

Algunos matchers como toBeInTheDocument no son parte de jest, son de una lib adicional llamada jest-dom

what to test
------------
test comopnent renders
test comopnent renders with props
test component renders in different states (ej si depede de si el usuario esta logueado)
test component reacts to events

what not to test
----------------
implementation details
third party code
code that is not important from an user point of view 
(ej no testear como se llamo a la funcion sino testear como se mostro el resultado)

RTL queries
-----------
Every test we write generally involves the following basic steps
1) Render the component
2) Find an element rendered by the component
3) test against the element found in step 2 which will pass or fail the test

To render the component, we use the render method from RTL (1)
For assertion, we use expect passing in a value and combine it with a matcher function from jest or jest-dom (3)
Queries are methods that testing library provides to find elements on the page (2)
to find a single element on the page, we have
-getBy...
-queryBy...
-findBy...
to find multiple elements on the page, we have
-getAllBy...
-queryAllBy...
-findAllBy...
The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId

getBy..
getBy.. class of queries return the matching node for a query, and throw a descriptive error if no elements match 
or if more than one match is found
The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue,
AltText, Title and finally TestId

getByRole
getByRole queries for elements with the given Role
Role refers to the ARIA (Accessible Rich Internet Applications) role which provides semantic meaning to content to 
ensure people using assistive technologies are able to use them

By default, many semantic elements in HTML have a role
Button element has a button role, anchor element has a link role, h1 to h6 elements have a heading role, checkboxes 
have a checkbox role, radio buttons have a radio role and so on
If you're working with elements that do not have a default role or if you want to specify a different role, the role 
attribute can be used to add the desired role
To use an anchor element as a button in the navbar, you coan add role='button'

para saber que role tien cada tipo de widget, puedo ir a https://testing-library.com/docs/queries/byrole y clickear 
en "a table of HTML elements with their default and desired roles" (https://www.w3.org/TR/html-aria/#docconformance)

getByRole Options
-----------------

Name:
The accessible name is for simple cases equal to 
1) the label of a form element
2) the text content for a button or
3) the value of the aria-label attribute

getByRole Options: name, level, hidden, selected, checked, pressed

getByLabelText
--------------
getByLabelText will search for the label that matches the givent text, then find the element associated with that 
label

getByPlaceholderText
--------------------
getByPlaceholderText will search for all elements with a placeholder attribute and find the one that matches the 
given text

getByText
---------
getByText will search for all elements that have a text node with textContent matching the given text
Tipically you'd use this to find a paragraph, div, or span elements

getByDisplayValue
-----------------
getByDisplayValue returns the input, textarea, or select element that has the matching display value

getByAltText
------------
getByAltText will return the element that has the given alt text
This method only supports elements which an alt atribute like <img>, <input>, <area> or custom HTML elements

getByTitle
----------
getByTitle returns the element that has the matching title attribute

getByTestId
-----------
getByTestId returns the element that has the matching data-testid attribute

Priority Order for Queries
--------------------------
"Your test should resemble how users interact with your code (component, page, etc.) as much as possible"
1) getByRole (si podemos usemos este)
2) getByLabelText (bueno para form fileds)
3) getByPlaceholderText
4) getByText (se puede usar par cosas no interactivas como div o span)
5) getByDisplayValue
6) getByAltText
7) getByTitle
8) getByTestId (solo se deberia usar cuando el texto no tenga sentido por ejemplo si es dinamico)
Se deberia hacer los testo con los primeros 5, el 6 y 7 pueden variar de un browser a otro

RTL getAllBy Queries
--------------------
Find multiple elements in the DOM
getAllBy returns an array of all matching nodes for a query, and throws an error if no elements match

textMatch
---------
textMatch represents a type can be either a string, regex or function

textMatch - string
<div>Hello World</div>
screen.getByText('Hello World') // full string match
screen.getByText('llo World', {exact: false}) // substring match
screen.getByText('hello world', {exact: false}) // ignore case

textMatch - reegex
<div>Hello World</div>
screen.getByText(/World/) // substring match
screen.getByText(/world/i) // substring match, ignore case
screen.getByText(/^hello world$/i) // full string match, ignore case

textMatch - custom function
(content?: string, element?: Element | null) => boolean
<div>Hello World</div>
screen.getByText((content) => content.startsWith('Hello'))

queryBy and queryAllBy
----------------------

queryBy:
- Returns the matching node for a query, and returns null if no elements match
- uselful for asserting an element is not present
- Throws an error if more than one match is found

queryAllBy:
- Returns an array of all matching nodes for a query, and returns an empty array if no elements match

Eso aplica a todos los queryBy  y queryAllBy (Role, LabelText, PlaceholderText, etc.)

findBy and findAllBy
--------------------

findBy:
- Returns a promise which resolves when an element is found which matches the given query
- The promise is rejected if no element is found or if more than one element is found after a default timeout 
    of 1000ms

findAllBy:
- Returns a promise which resolves to an array of elements when any elements are found which match the given query
- The promise is rejected if no elements are found after a default timeout of 1000ms

Manual Queries
--------------

RTL Queries:
- getBy & getAllBy
- queryBy & queryAllBy
- findBy & findAllBy

Manual queries - you can use the regular querySelector DOM API to find elements

const {container} = render(<MyComponent />)
const foo = container.querySelector('[data-foo="bar"]')

no se recomienda usar queries manualses por class, etc. porque esos atributos no son visibles por el usuario

Debugging
---------
screen.debug() permite debuguear mostrando un arbol formateado del dom, en cualquer momento del test
logRoles muestra los roles implicitos del dom tree

testing Playground
------------------
La extension testing playground de google permite obtener la mejor forma de hacer query
(https://chromewebstore.google.com/detail/testing-playground/hejbmebodbijjdhflfknehhcgaklhano)
un a vez instalada arir debugger, ir a la pestaña testing playground, hacer hover del item o
seleccionar el widget de la pestaña de elementos, y va a aparecer el query sugerido, 
ademas de diferentes queries basados en prioridad

Users Interactions
------------------
A click using a mouse or a keypress using a keyboard
Software has to respond to such interactions
Tests should ensure the interactions are handled as expected

user-event:
A companion library for Testing Library that simulates user interactions by dispatching the events that would happen 
if the interaction took place in a browser 
It is the reccommended way to test user interactions with RTL

fireEvent vs user-event:
- fireEvent is a method from RTL which is used to dispatch DOM events (lanza 1 evento)
- user-event simulates full interactions, which may fire multiple events and do additional checks along the way
- For example we can dispatch the change event on an input field using fireEvent
- When user types into a text box, the element has to be focused, and then keyboard and input events are fired and
the selection and value on the element are mainpulated as they type.
- user-event allows you to describe a user interaction instead of a concrete event. It adds visibility and
intractability checks along the way and manipulates the DOM just ike a user interaction in the browser would.
It factors that the browser e.g. wouldn't let a user click a hidden element or type in a disabled box.

Pointer interactions
--------------------

Convenience APIs:
click() no es un pointer API, en una convenience API que llama a un pointer API.
Convenience APIs es lo que usamos cuando escribimos tests

interacciones de mouse: 
clicks: click(), dblClick(), tripleClick()
movimiento: hover(), unhover()
puede usarse para testear si aparece/desaparece un tooltip o testear estilos hover de elementos

Pointer APIs:
los pointer APIs son interacciones de mas bajo nivel
pointer({keys: '[MouseLeft]'}) // simula presionar el boton izquierdo del mouse
pointer({keys: '[MouseLeft][MouseRight]'}) // simula click de boton izquierdo del mouse seguido
// de un click de boton derecho del mouse
pointer('[MouseLeft][MouseRight]') // se le puede pasar un string si keys es el unico parametro
pointer('[MouseLeft>]') // presionar el boton izquierdo sin soltarlo
pointer('[/MouseLeft]') // soltar el boton presionado antes

Keyboard interactions
---------------------

Utility API:
type() // escribir
clear() // clear an editable element
    test('clear', async () => {
        render(<textarea defaultValue="Hello World!!" />)
        await userEvent.clear(screen.getByRole('textbox'))
        expect(screen.getByRole('textbox')).toHaveValue('')
    })
selectOptions() // permite seleccionar elementos
    test('selectOptions', async () => {
        render (
            <select multiple>
                <option value="1">A</option>
                <option value="2">B</option>
                <option value="3">C</option>
            </select>
        )
        //con selectOption puedo seleccionar por value (1) o su etiqueta (C)
        await userEvent.selectOptions(screen.getByRole('listbox'), ['1', 'C'])
        expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)
        expect(screen.getByRole('option', {name: 'B'}).selected).toBe(false)
        expect(screen.getByRole('option', {name: 'C'}).selected).toBe(true)
    })
deselectOptions() // permite des seleccionar elementos
    test('selectOptions', async () => {
        render (
            <select multiple>
                <option value="1">A</option>
                <option value="2" selected>B</option>
                <option value="3">C</option>
            </select>
        )
        await userEvent.deselectOptions(screen.getByRole('listbox'), '2')
        expect(screen.getByText('B').selected).toBe(false)
    })
upload() // simula que un usuario hizo click y subio archifo con un file dialog.
    test('upload file', async () => {
        render (
            <div>
                <label htmlfor="file-uploader">Upload file:</label>
                <input id="file-uploader" type="file" />
            </div>,
        )
        const file = new File(['hello'], 'hello.png', {type: 'image/png'})
        const input = screen.getByLabelText(/upload file/i)
        await userEvent.upload(input, file)
        expect(input.files[0]).toBe(file)
        expect(input.files.item(0)).toBe(file)
        expect(input.files).toHaveLenght(1)
    })

Convenience API:
tab()

Clipboard APIs:
copy()
cut()
paste()

Keyboard API (low level):
keyboard('foo') // translates to: f, o, o
keyboard('{Shift}A{/Shift}') // translates to: Shift(down), A, Shift(up)
